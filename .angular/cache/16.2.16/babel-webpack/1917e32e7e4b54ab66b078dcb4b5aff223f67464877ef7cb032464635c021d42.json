{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CorrectionService = /*#__PURE__*/(() => {\n  class CorrectionService {\n    constructor() {}\n    compareStrings(str1, str2) {\n      let answer = str1;\n      let solution = str2;\n      if (answer === solution) {\n        return true;\n      } // removing punctuation marks:\n      // tslint:disable-next-line:max-line-length\n      answer = answer.replace(/[?=]|[¿=]|[!=]|[¡=]/gi, '').replace(/[, ]|[. ]/gi, ' ').replace(/[,]|[.]/gi, ' ').replace(/^(\\s*)|(\\s*)$/g, '').replace(/\\s+/g, ' ');\n      solution = solution.replace(/[?=]|[¿=]|[!=]|[¡=]/gi, '').replace(/[, ]|[. ]/gi, ' ').replace(/[,]|[.]/gi, ' ').replace(/^(\\s*)|(\\s*)$/g, '').replace(/\\s+/g, ' ');\n      if (answer === solution) {\n        return true;\n      } // removing capital letters:\n      answer = answer.toLowerCase();\n      solution = solution.toLowerCase();\n      if (answer === solution) {\n        return true;\n      } // removing accent mark:\n      answer = answer.replace(/á/g, 'a').replace(/é/g, 'e').replace(/í/g, 'i').replace(/ó/g, 'o').replace(/ú/g, 'u');\n      solution = solution.replace(/á/g, 'a').replace(/é/g, 'e').replace(/í/g, 'i').replace(/ó/g, 'o').replace(/ú/g, 'u');\n      if (answer === solution) {\n        return true;\n      } // removing quoutes:\n      answer = answer.replace(/\"/g, '');\n      solution = solution.replace(/\"/g, '');\n      if (answer === solution) {\n        return true;\n      } // removing white spaces at the beginning and at the end:\n      answer = answer.trim();\n      solution = solution.trim();\n      if (answer === solution) {\n        return true;\n      } // the answer is wrong\n      return false;\n    }\n    compareArrays(arr1, arr2) {\n      let result = true;\n      arr1.forEach(elem => {\n        const correctAnswer = arr2.find(e => e.includes(elem[0]));\n        if (correctAnswer) {\n          elem.forEach(res => result = result && correctAnswer.includes(res));\n        } else {\n          result = false;\n        }\n      });\n      return result;\n    }\n    static #_ = this.ɵfac = function CorrectionService_Factory(t) {\n      return new (t || CorrectionService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CorrectionService,\n      factory: CorrectionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CorrectionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}